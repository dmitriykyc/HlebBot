import asyncio
from datetime import datetime
import logging
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext

from admins import get_all_admins
from bd.answers_users_comm import create_answer_data_bd, create_answer_from_user, get_data_answer_from_user, select_answer
from bd.users_commands import create_user, make_active_user, make_deactivate_user, select_user
from keyboards.inline_get_lesson import get_keyb_get_stars, get_star_data
from state.answer_state import CreateAnswer

start_message1 = f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É—é—Ç–Ω–æ–µ –∫–∞—Ñ–µ ¬´–ü–æ—á–µ–º—É —Ö–ª–µ–±¬ª!\n–ú—ã –∏—Å–∫—Ä–µ–Ω–Ω–µ —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å—Ä–µ–¥–∏ –Ω–∞—à–∏—Ö –≥–æ—Å—Ç–µ–π.\n–ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –Ω–∞—à–∞ –¥—É—à–µ–≤–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, –∞—Ä–æ–º–∞—Ç–Ω—ã–π —Ö–ª–µ–±, –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ –æ—Å–æ–±—ã–º —Ä–µ—Ü–µ–ø—Ç–∞–º, –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–≤–∏–ª–∏ —É –≤–∞—Å —Ç–æ–ª—å–∫–æ –ø—Ä–∏—è—Ç–Ω—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è. –ú—ã —Ü–µ–Ω–∏–º –∫–∞–∂–¥–æ–≥–æ –≥–æ—Å—Ç—è –∏ —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–¥–µ–ª–∞—Ç—å –≤–∞—à –≤–∏–∑–∏—Ç –æ—Å–æ–±–µ–Ω–Ω—ã–º.\n–ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!'

start_message2 = '–ü–æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5.\n\n'

start_message3 = '–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Ç–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏! –í–∞—à–µ –º–Ω–µ–Ω–∏–µ ‚Äî —ç—Ç–æ —Ç–æ, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –µ—â—ë –ª—É—á—à–µ.\n' \
    '–ë—É–¥–µ–º –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω—ã, –µ—Å–ª–∏ –≤—ã –æ—Å—Ç–∞–≤–∏—Ç–µ —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –ø–æ —Ä–∞–±–æ—Ç–µ –Ω–∞—à–µ–≥–æ –∫–∞—Ñ–µ. –°–¥–µ–ª–∞—Ç—å —ç—Ç–æ –º–æ–∂–Ω–æ:\n' \
    '‚Ä¢–≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n' \
    '‚Ä¢–≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n' \
    '‚Ä¢ –ø—Ä–∏–∫—Ä–µ–ø–∏–≤ —Ñ–æ—Ç–æ \n' \
    '–ñ–¥—ë–º –≤–∞—à–∏—Ö –æ—Ç–∑—ã–≤–æ–≤! –û–Ω–∏ –ø–æ–º–æ–≥–∞—é—Ç –Ω–∞–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ –¥–ª—è –≤–∞—Å ü•ê'

def register_start_handlers(dp: Dispatcher):
    @dp.message_handler(commands='start')
    async def start_comm(message: types.Message):
        id_user = message.from_user.id
        first_name = message.from_user.first_name
        user_name = message.from_user.username
        logging.info(f'{id_user} ({first_name}) --> –í–æ—à–µ–ª –≤ —á–∞—Ç')
        if select_user(id_user):
            make_active_user(id_user)
        else:
            create_user(id=id_user, first_name=first_name, user_name=user_name) 
        # if id_user in get_all_admins():
        #     await message.answer('–í—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
        # else:
        await message.answer(start_message1)
        await message.answer(start_message2, reply_markup=get_keyb_get_stars())

    # @dp.callback_query_handler()
    # async def answ_first(call: types.CallbackQuery, ):
    #     await call.answer()
    #     await call.message.delete()
    #     # await call.message.answer(start_message2)
    #     await call.message.answer(start_message2, reply_markup=get_keyb_get_stars())

    @dp.callback_query_handler(get_star_data.filter())
    async def answ_first(call: types.CallbackQuery, callback_data, state: FSMContext):
        await call.answer()
        user_id = call.from_user.id

        stars = callback_data['star']

        text_new2 = f'<b>–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞:</b> {stars}‚≠êÔ∏è\n\n'

        await call.message.delete()
        await call.message.answer(text_new2 + start_message3)
        answer_id = create_answer_from_user(user_id, stars)
        await state.set_state(CreateAnswer.get_data)
        await state.update_data(answer_id=answer_id)
        await asyncio.sleep(900)
        if await state.get_state():
            await state.finish()
            await call.message.answer('–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º. \n–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!\n\n–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤, –Ω–∞–∂–º–∏—Ç–µ /start')
            await dp.bot.send_message(354585871, '–ü–û–°–ú–û–¢–†–ò –¢–ê–ú –°–û–°–¢–û–Ø–ù–ò–ï –ó–ê–ö–†–´–õ–û–°–¨, –ï–°–¢–¨ –õ–ò –û–¢–í–ï–¢')
            answer_data = get_data_answer_from_user(answer_id)
            answer_info = select_answer(answer_id)
            user_data = select_user(user_id)
            msg_star_place = f"<b>–û—Ü–µ–Ω–∫–∞:</b> {answer_info['stars']}‚≠êÔ∏è"
            if answer_data:
                for admin in get_all_admins():
                    try:
                        await dp.bot.send_message(admin, f'‚úÖ–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤!\n\n–û—Ç: {user_data["first_name"]}\n@{user_data["user_name"]}\n\n' \
                            f'{msg_star_place}')
                        for ell in answer_data:
                                if ell['text']:
                                    await dp.bot.send_message(admin, ell['text'])
                                elif ell['voice_id']:
                                    await dp.bot.send_voice(admin, ell['voice_id'])
                                elif ell['photo_id']:
                                    await dp.bot.send_photo(admin, photo=ell['photo_id'])
                                elif ell['video_id']:
                                    await dp.bot.send_video(admin, video=ell['video_id'])
                                elif ell['sticker_id']:
                                    await dp.bot.send_sticker(admin, ell['sticker_id'])
                                elif ell['gif_id']:
                                    await dp.bot.send_animation(admin, ell['gif_id'])
                                elif ell['document_id']:
                                    await dp.bot.send_document(admin, ell['document_id'])
                                elif ell['video_note_id']:
                                    await dp.bot.send_video_note(admin, ell['video_note_id'])
                                await asyncio.sleep(1)
                        logging.info(f'{admin} - –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤')
                    except:
                        logging.info(f'{admin} - block BOT^ not send message')

    # @dp.message_handler(state=CreateAnswer.get_data())
    # async def start_comm(message: types.Message, state: FSMContext):
    #     state_data = await state.get_data()
    #     if state_data:
    #         answer_id = state_data['answer_id']


    @dp.message_handler(content_types=[types.ContentType.ANY], state=CreateAnswer.get_data)
    async def get_answer(message: types.Message, state: FSMContext):
        keyb = types.InlineKeyboardMarkup(row_width=1).add(types.InlineKeyboardButton(
            text='‚úÖ–ì–æ—Ç–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', callback_data='done_answer'))
        state_data = await state.get_data()
        # print(state_data)
        answer_id = int(state_data['answer_id'])
        if message.text:
            text = message.parse_entities()
            create_answer_data_bd(answers_users_id=answer_id, text=text)
            logging.info(f'{message.from_user.id} - –Ω–∞–ø–∏—Å–∞–ª {message.text}')
        elif message.photo:
            photo_id = message.photo[-1]['file_id']
            create_answer_data_bd(
                answers_users_id=answer_id, photo_id=photo_id)
        elif message.document:
            document_id = message.document.file_id
            create_answer_data_bd(
                answers_users_id=answer_id, document_id=document_id)
        elif message.sticker:
            sticker_id = message.sticker.file_id
            create_answer_data_bd(
                answers_users_id=answer_id, sticker_id=sticker_id)
        elif message.voice:
            voice_id = message.voice.file_id
            create_answer_data_bd(
                answers_users_id=answer_id, voice_id=voice_id)
        elif message.video:
            video_id = message.video.file_id
            create_answer_data_bd(
                answers_users_id=answer_id, video_id=video_id)
        elif message.animation:
            gif_id = message.animation.file_id
            create_answer_data_bd(
                answers_users_id=answer_id, gif_id=gif_id)
        elif message.video_note:
            video_note_id = message.video_note.file_id
            create_answer_data_bd(
                answers_users_id=answer_id, video_note_id=video_note_id)

        if 'mess_id' in state_data and 'chat_id' in state_data:
            msg_id = state_data['mess_id']
            chat_id = state_data['chat_id']
            await dp.bot.delete_message(message_id=msg_id, chat_id=chat_id)
        msg = await message.answer('–ï—Å–ª–∏ –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –≤–µ—Å—å –æ—Ç–∑—ã–≤, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n\n' \
            '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –µ—â–µ —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç.', reply_markup=keyb)
        await state.update_data(mess_id=msg['message_id'], chat_id=msg.chat['id'])


    @dp.callback_query_handler(text='done_answer', state=CreateAnswer.get_data)
    async def answer_done(call: types.CallbackQuery, state: FSMContext):
        await call.answer()
        state_data = await state.get_data()
        user_id=call.from_user.id
        await state.finish()
        if 'mess_id' in state_data and 'chat_id' in state_data:
            msg_id = state_data['mess_id']
            chat_id = state_data['chat_id']
            await dp.bot.delete_message(message_id=msg_id, chat_id=chat_id)

        answer_id = int(state_data['answer_id'])
        await call.message.answer('–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º. \n–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!\n\n–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤, –Ω–∞–∂–º–∏—Ç–µ /start')
        answer_data = get_data_answer_from_user(answer_id)
        answer_info = select_answer(answer_id)
        user_data = select_user(user_id)
        msg_star_place = f"<b>–û—Ü–µ–Ω–∫–∞:</b> {answer_info['stars']}‚≠êÔ∏è"
        for admin in get_all_admins():
            try:
                await dp.bot.send_message(admin, f'‚úÖ–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤!\n\n–û—Ç: {user_data["first_name"]}\n@{user_data["user_name"]}\n\n' \
                    f'{msg_star_place}')
                for ell in answer_data:
                        if ell['text']:
                            await dp.bot.send_message(admin, ell['text'])
                        elif ell['voice_id']:
                            await dp.bot.send_voice(admin, ell['voice_id'])
                        elif ell['photo_id']:
                            await dp.bot.send_photo(admin, photo=ell['photo_id'])
                        elif ell['video_id']:
                            await dp.bot.send_video(admin, video=ell['video_id'])
                        elif ell['sticker_id']:
                            await dp.bot.send_sticker(admin, ell['sticker_id'])
                        elif ell['gif_id']:
                            await dp.bot.send_animation(admin, ell['gif_id'])
                        elif ell['document_id']:
                            await dp.bot.send_document(admin, ell['document_id'])
                        elif ell['video_note_id']:
                            await dp.bot.send_video_note(admin, ell['video_note_id'])
                        await asyncio.sleep(1)
                logging.info(f'{admin} - –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤')
            except:
                logging.info(f'{admin} - block BOT, not send message')



    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã—Ö–æ–¥ –∏–∑ –±–æ—Ç–∞
    @dp.my_chat_member_handler(run_task=True)
    async def some_handler(my_chat_member: types.ChatMemberUpdated):
        '''–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞'''
        user_id = my_chat_member['chat']['id']
        logging.info(f'{user_id} --> –ü–æ–∫–∏–Ω—É–ª –±–æ—Ç–∞')
        if my_chat_member['new_chat_member']['status'] == "kicked":
            make_deactivate_user(user_id)

    